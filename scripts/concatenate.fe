(= # (fn (a b)
    (if
        (atom a)
            (cons a b)
        (not (cdr a))
            (cons (car a) b)
        (do
            (let aa a)
            (while (cdr (cdr a))
                (= a (cdr a)))
            (if (atom b)
                    (setcdr a (cons b nil))
                    (setcdr a (cons (car (cdr a)) b)))
            aa))))

(assert-equals '(1 2 3 4 5 6) (# '(1 2 3) '(4 5 6)))
(assert-equals '(1 2 3 4 5 6) (# '(1 2 3 4 5) 6))
(assert-equals '(1 2 3 4 5 6) (# '(1 2 3 4 5) '(6)))
(assert-equals '(1 2 3 4 5 6) (# '(1) '(2 3 4 5 6)))
(assert-equals '(1 2 3 4 5 6) (# 1 '(2 3 4 5 6)))

(= count (fn (xs)
    (let n 0)
    (while xs
        (= n (+ n 1))
        (= xs (cdr xs)))
    n))

(assert-is 6 (count '(1 2 3 4 5 6)))
(assert-is 0 (count nil))
(assert-is 0 (count ()))
(assert-is 0 (count '()))
(assert-is 1 (count '(nil)))
